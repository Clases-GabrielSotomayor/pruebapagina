---
title: "Introducción a R"
linktitle: "1: Introducción a R"
date: "2021-08-09"
menu:
  example:
    parent: Ejemplos
    weight: 1
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

## 0. Objetivo del práctico

El objetivo del práctico es introducirnos en Rstudio, debemos recordar que **R es un lenguaje orientado a objetos** y Rstudio es un **Ambiente integrado**, en el cual podemos tener muchas funciones, las cuales veremos a continuación:

## 1. R como calculadora

Debemos recordar que R puede generar múltiples operaciones, una de ellas es realizar diversas operaciones estadísticas

```{r}
5+2
5-2
5/2
5*2
```

Como primer ejemplo veremos formas de crear objetos, asignandole un número a un vector

```{r}
x<-5
```

Cómo el objeto queda en el enviroment, después podemos imprimir o llamar al objeto

```{r}
x
```

Podemos crear los objetos que creamos necesarios, esta vez, crearemos un segundo objeto llamado y

```{r}
y<-10
```

Ahora podemos realizar operaciones con nuestros objetos

```{r }
x+y
x-y
x*y
x/y
```

También podemos guardar los resultados como objetos

```{r}
z<-x^2 
z
```

También podemos realizar operaciones lógicas. Para establecer una igualdad usamos doble signo ==

```{r}
x>y 
15==x+y 
16>x+y
```

Creación de una variable. "Edad". mediante la función concatenar "c()", podemos crear un objeto que agrupe un conjunto de datos. Para el lenguaje del software esto es un vector, para nosotros una variable, en este caso numérica (numeric): intervalar, continua, cuantitativa.

```{r}
Edad<- c(18,25,33,38,67,25,35,57,99)
summary(Edad)
table(Edad)
class(Edad)
```

También podemos realiar operaciones sobre los vectores

```{r}
Edad/2
Edad-1
Edad2<-Edad-1 #y guardar los resultados

Edad/c(1,2)
```

Creación de una variable. "Sexo". Se sigue la misma lógica. Variable cualitativa y nominal, dicotómica. Tipo "Character" Categorías: H=Hombre; M=Mujer.

```{r}
Sexo<-c("H","H","H","M","H","M","M","M")

summary(Sexo)
table(Sexo)
class (Sexo)
```

También puede expresarse como factor siendo variable dummy (para 1 y 0). 
Variable cualitativa, nominal.

```{r}
S<-c(1,1,1,0,1,0,0,0,9,9)

#SEXO<-factor(S, levels = c(0,1,9), labels = c("Mujer","Hombre")) #importancia de los errores
SEXO<-factor(S, levels = c(0,1,9), labels = c("Mujer","Hombre","NC"))

summary(SEXO)
table(SEXO)
```

Variable Nivel socioecon?mico. Ordinal, cualitativa.
NSE: 1=E, 2=D, 3=C3, 4=C2, 5=C1, 6=AB

```{r}
P1<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,6,99,99)

NSE<-factor(P1,levels=c(1,2,3,4,5,6),labels=c("E","D","C3","C2","C1","AB"))
table(NSE)
summary(NSE) #NA son lo perdidos
```


Podemos seleccionar elementos específicos de los vecotres

```{r}
NSE[4] #pedimos el cuarto elemento
NSE[1:9] #los primeros 9
NSE[c(3,4,5,8,24,31)]
NSE[37]
NSE[c(T,F)]
NSE[NSE=="AB"]
length(NSE)
class(NSE)
```

Crear listas

```{r}
x <- list(u=c(2,3,4), v="abc")
x #el elemento u de la lista es un vector con 3 números, y el elemento v es abc
```

ver el elemento u, de la lista x
Pedir elementos

```{r}
x$u
x[[2]]
x[[1]][2]
str(x) #este comando muestra la estructura de un objeto de manera resumida
```


Crear bases de datos

```{r}
base<-data.frame(Edad,
           SEXO[1:9],
           NSE[1:9])

base
```

Ver nombre de las columnas (variables)

```{r}
colnames(base)
```

Cambiar nombre de las columnas (variables)

```{r}
colnames(base)<-c("edad","sexo","nse")
```

Podemos seleccionar variables con el operador $

```{r}
base$edad #base$variable
```

Tambien podemos usar corchetes base[filas,columnas]

```{r}
base[5,2]
base[1:5,2]
base[1:5,c(1,3)]
```

Sobre una columna podemos seleccionar elementos como un un vector

```{r}
base$edad[1]
base$edad[base$sexo=="Hombre"] #podemos usar condiciones lógicas
```

Podemos aplicar funciones sobre la base y sobre las variables

```{r}
head(base)  #entrega los primeros elemntos
View(base) #Permite ver la base
str(base)


table(base$sexo)
help(table)
?table

mean(base$edad)
```

Podemos guardar la base de datos

```{r}
save(base, file = "base.RData") #Se indica primero el objeto a guardar 
                            #y luego el nombre del archivo, entre comillas.
```

limpiar el ambiente de trabajo

```{r}
remove(Edad) #borrar un objeto particular
remove(list = ls()) #Borrar todo
```




